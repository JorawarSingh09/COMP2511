#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "invertedIndex.h"
#include <ctype.h>
/**
 * Normalises a given string. See the spec for details. Note: you should
 * modify the given string - do not create a copy of it.
 */
void Remove(char *str, int num);
char *normaliseWord(char *str){
    int len = strlen(str);
    int i = 0;
    //remove leading spaces
    while(str[i] == ' '){
        Remove(str, i);  //since every time remove an item, next item goes to that position
        len--;
    }
    //remove specfic punctuation appear after a word  
    i = 0;  
    while(i < len){
        if (str[i+1] == ' ' || str[i+1] == '\0' || str[i+1] == '\t' || str[i+1] == '\n'){
            if (str[i] == '.' || str[i] == ',' || str[i] == ';' || str[i] == '?'){
                Remove(str, i);
            }
        }
        i++;
    }
    // remove trailing spaces
    i = len - 1;
    while(str[i] == ' ' && i >= 0){
        Remove(str, i);  
        i--;      
    }
    //converting all characters to lowercase
    i = 0;
    while(i < len){
        str[i] = tolower(str[i]);
        i++;
    }
    
    return str;
}

void Remove(char *str, int num){
    strcpy(&str[num], &str[num +1]);
}
/**
 * This function opens the collection file with the given name, and then
 * generates an inverted index from those files listed in the collection
 * file,  as  discussed  in  the spec. It returns the generated inverted
 * index.
 */
InvertedIndexBST generateInvertedIndex(char *collectionFilename){
    InvertedIndexBST
    FILE *fp = fopen(collectionFilename, "r");
    char a[255];
    while (fscanf(fp, "%s", a) != EOF){
        FILE *fpr = fopen(a, "r");
    
    }
    return NULL;
}

/**
 * Outputs  the  given inverted index to a file named invertedIndex.txt.
 * The output should contain one line per word, with the  words  ordered
 * alphabetically  in ascending order. Each list of filenames for a word
 * should be ordered alphabetically in ascending order.
*/
void printInvertedIndex(InvertedIndexBST tree){
}

// Functions for Part-2

/**
 * Returns  an  ordered list where each node contains a filename and the 
 * corresponding tf-idf value for a given searchWord. You only  need  to
 * include documents (files) that contain the given searchWord. The list
 * must  be  in  descending order of tf-idf value. If there are multiple
 * files with same  tf-idf  value,  order  them  by  their  filename  in
 * ascending order.
*/
TfIdfList calculateTfIdf(InvertedIndexBST tree, char *searchWord, int D){
    return NULL;
}

/**
 * Returns  an  ordered list where each node contains a filename and the
 * summation of tf-idf values of all the matching search words for  that
 * file.  You only need to include documents (files) that contain one or
 * more of the given search words. The list must be in descending  order
 * of summation of tf-idf values (tfIdfSum). If there are multiple files
 * with  the  same tf-idf sum, order them by their filename in ascending
 * order.
 */
TfIdfList retrieve(InvertedIndexBST tree, char *searchWords[], int D){
    return NULL;

}
